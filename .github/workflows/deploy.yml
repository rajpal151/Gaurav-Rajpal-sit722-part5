name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Azure using secrets
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
  

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 4: Initialize Terraform
      - name: Terraform Init
        working-directory: ./scripts  # Assuming .tf files are in ./scripts
        run: terraform init

      # Step 5: Terraform Plan (optional but recommended)
      - name: Terraform Plan
        working-directory: ./scripts
        run: terraform plan

      # Step 6: Apply Terraform (create/update infrastructure)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: ./scripts
        run: terraform apply -auto-approve

      # Step 7: Log in to Azure Container Registry (ACR)
      - name: Log in to Azure Container Registry (ACR)
        run: |
          echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login ${{ secrets.AZURE_ACR_LOGIN_SERVER }} -u ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin

      # Step 8: Build Docker images for the microservices
      - name: Build and tag Docker images
        run: |
          docker build -t rajpal151.azurecr.io/book_catalog:latest ./book_catalog
          docker build -t rajpal151.azurecr.io/inventory_management:latest ./inventory_management

      # Step 9: Push Docker images to ACR
      - name: Push Docker images to ACR
        run: |
          docker push rajpal151.azurecr.io/book_catalog:latest
          docker push rajpal151.azurecr.io/inventory_management:latest

      # Step 10: Set up kubectl and deploy to Azure Kubernetes Service (AKS)
      - name: Set up Kubeconfig
        run: echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

      # Step 11: Deploy to AKS
      - name: Deploy to AKS
        run: kubectl apply -f deployment.yaml
