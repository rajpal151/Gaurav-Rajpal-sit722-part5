name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Azure Container Registry (ACR)
      - name: Log in to Azure Container Registry (ACR)
        run: |
          echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login ${{ secrets.AZURE_ACR_LOGIN_SERVER }} -u ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin

      # Step 3: Build Docker images for the microservices
      - name: Build and tag Docker images
        run: |
          docker build -t ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/book_catalog:latest ./book_catalog
          docker build -t ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/inventory_management:latest ./inventory_management

      # Step 4: Push the images to Azure Container Registry (ACR)
      - name: Push Docker images to ACR
        run: |
          docker push ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/book_catalog:latest
          docker push ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/inventory_management:latest

      # # Step 5: Update Kubernetes deployment with the new Docker image
      #   run: |
      #     sed -i 's|{{DOCKER_IMAGE_BOOK_CATALOG}}|${{ secrets.AZURE_ACR_LOGIN_SERVER }}/book_catalog:latest|g' ./k8s/deployment-book-catalog.yaml
      #     sed -i 's|{{DOCKER_IMAGE_INVENTORY_MANAGEMENT}}|${{ secrets.AZURE_ACR_LOGIN_SERVER }}/inventory_management:latest|g' ./k8s/deployment-inventory-management.yaml

      # Step 6: Deploy to Azure Kubernetes Service (AKS)
      - name: Apply Kubernetes deployment
        run: |
          kubectl apply -f ./scripts/kubernetes/deployment.yml
          kubectl rollout status deployment/book-catalog-deployment
          kubectl rollout status deployment/inventory-management-deployment
        env:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}


