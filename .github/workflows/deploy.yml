name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Azure using GitHub secrets
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 4: Initialize Terraform
      - name: Terraform Init
        working-directory: ./scripts  # Assuming .tf files are in ./scripts
        run: terraform init

      # Step 5: Apply Terraform (create/update infrastructure)
      - name: Terraform Apply
        working-directory: ./scripts
        run: terraform apply -auto-approve

      # Step 6: Get ACR name and login server from Terraform output
      - name: Get ACR Login Server and Name from Terraform output
        id: acr_info
        working-directory: ./scripts
        run: |
          ACR_NAME=$(terraform output -raw acr_name)
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
          echo "::set-output name=acr_name::$ACR_NAME"
          echo "::set-output name=acr_login_server::$ACR_LOGIN_SERVER"

      # Step 7: Enable ACR Admin User (ensure itâ€™s enabled)
      - name: Enable ACR Admin
        run: |
          az acr update --name ${{ steps.acr_info.outputs.acr_name }} --admin-enabled true

      # Step 8: Get ACR Admin Credentials
      - name: Get ACR Admin Credentials
        id: acr_admin_credentials
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ steps.acr_info.outputs.acr_name }} --query "username" --output tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ steps.acr_info.outputs.acr_name }} --query "passwords[0].value" --output tsv)
          echo "::set-output name=acr_username::$ACR_USERNAME"
          echo "::set-output name=acr_password::$ACR_PASSWORD"

      # Step 9: Log in to Azure Container Registry (ACR)
      - name: Log in to Azure Container Registry (ACR)
        run: |
          echo "${{ steps.acr_admin_credentials.outputs.acr_password }}" | docker login ${{ steps.acr_info.outputs.acr_login_server }} -u ${{ steps.acr_admin_credentials.outputs.acr_username }} --password-stdin

      # Step 10: Build and tag Docker images for the microservices
      - name: Build and tag Docker images
        run: |
          docker build -t ${{ steps.acr_info.outputs.acr_login_server }}/book_catalog:latest ./book_catalog
          docker build -t ${{ steps.acr_info.outputs.acr_login_server }}/inventory_management:latest ./inventory_management

      # Step 11: Push Docker images to ACR
      - name: Push Docker images to ACR
        run: |
          docker push ${{ steps.acr_info.outputs.acr_login_server }}/book_catalog:latest
          docker push ${{ steps.acr_info.outputs.acr_login_server }}/inventory_management:latest

      # Step 12: Get AKS credentials from Terraform output
      - name: Get AKS credentials from Terraform output
        run: |
          az aks get-credentials --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw aks_cluster_name)

      # Step 13: Deploy to AKS
      - name: Deploy to AKS
        run: kubectl apply -f deployment.yaml
